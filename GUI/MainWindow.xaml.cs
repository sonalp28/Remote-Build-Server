/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MainWindow.xaml.cs : Demonstrate GUI client built using Windows Presentation Foundation                                 //
//                      The GUI client allows user to browse and select directory path on which GUI will load the .cs files//                                                                                //
//                      into listbox1 & then it'll allow user to select & send files present at local storage from listbox2//
//                      to Repository storage directory. It'll also generate build request of selected files and save it to//
//                      Repository storage directory & then command repository to send it/them to mother builder.          //
//                                                                                                                         //
// Platform          : Dell Inspiron 13 - Windows 10, Visual Studio 2017                                                   //-|_ 
// Language          : C# & .Net Framework                                                                                 //-|  <----------Requirement 1---------->
// Application       : Project 4 [Build Server] Software Modeling & Analysis CSE-681 Fall'17                               //
// Author            : Sonal Patil, Syracuse University                                                                    //
//                     spatil06@syr.edu (408)-416-6291                                                                     //  
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*TAb 1 - Main
 * Browse Button                                 - Opens a window to choose the directory path and loads .cs files from that directory into the ListBox#1
 * ListBox#1                                     - Shows the .cs file names selcted from local storage directory
 * Send Files to Repository Button               - Sends selected files from ListBox#1 to Repository storage directory
 * Get Files in Repository Button                - Gets files name of files present in the Repository storage directory 
 * ListBox#2                                     - Shows files name of files present in the Repository storage directory 
 * Add test element                              - Adds the test element to the build request structure
 * Create-Save BuildRequest to Repository Button - Creates saves a build request of selected files from Listbox#2 and saves it to Repository storage directory
 * Get Existing BuildRequest Files Button        - Shows currently existing build request files in repository in the ListBox#3            
 * ListBox#3                                     - Shows the files name of generated/existing build request file.
 * Send BuildRequests to Builder Button          - Gives the command to repository to send the selected build request files from ListBox#3 to Mother Builder
 * TextBox                                       - Gives the number of child builder processes to spawn
 * Start Mother Builder Button                   - sends the number got from TextBox to Mother Builder 
 * ShutDown ProcessPool Button                   - Gives the command to shut down the process pool i.e. all child builders  * 
 * TAB 2 - Logs 
 * Show Files Button            - Shows all build/test log files generated by child builder/test harness that are present in the repository
 * ListBox#4                    - Shows all .txt file names present in the repository
 * Show Log File Content Button - Shows the content of selected log file from listbox#4 into Textbox
 * Textbox [Name="log"]         - Shows the content of selected log file from listbox#4 into Textbox
 */
//--------------------------------------------------------------------------------------------------------------------------------------------------------//
//Prologues - 1. public MainWindow() - Initializes the Components placed in the window, message dispatcher and comm componenets 
//            2. void initializeMessageDispatcher() - defines how to process each message command
//            3. private void Window_Loaded(object sender, RoutedEventArgs e) - when window is loaded the the content written inside this methos gets displayed in the window 
//            4. public void showOnCommandPrompt() - Use of Command prompt to display GUI information and Project Requirment Demo Info
//            5. void showPath(string path) - shows the path selected from the browse window into the textbox 
//            6. void addFile(string file) - adds the particular extension files available at the selected directory path into the first listbox
//            7. void search(string path, string pattern) - searches recursivly for files with matching pattern in the given directory path   
//            8. private void browse_Click(object sender, RoutedEventArgs e) - On button click, Opens a browser window for selecting the directory.
//            9. private void send_files_toRepo(object sender, RoutedEventArgs e) - On button click, Sends comm message to Repo with body as name of files stored at local storage 
//            10.private void get_files_fromRepo(object sender, RoutedEventArgs e) - On button Click, Receives comm message from Repo body as file names of files present in the Repository
//            11.public void add_testElement(object sender,RoutedEventArgs e) - On button Click, Adds test element into a build structure and passes it to create build request on user command    
//            12.private void create_save_BR(object sender, RoutedEventArgs e) - On button Click, Creates & Saves Build Request to Repository storage
//            13.public void br_files(object sender, RoutedEventArgs e) - On button click, shows existing build request files into ListBox#3
//            14.private void localFiles_MouseDoubleClick(object sender, MouseButtonEventArgs e) - Shows content of selected file from ListBox#3 into CodePopUp window
//            15.private void send_BR_toBuilder(object sender, RoutedEventArgs e) - On button Click, Sends comm message to Repo asking repo to send build request file/s to Mother builder
//            16.public void start_builder(object sender, RoutedEventArgs e) - On button Click, sends comm message to Mother builder with body as number of procees to spawn
//            17.private void end_process_pool(object sender, RoutedEventArgs e) - On button Click, kills the process pool i.e child builders along with mother builder
//            18.private void show_BL_files(object sender, RoutedEventArgs e) - On button click, Shows all build/test log files generated by child builder/test harness that are present in the repository
//            19.private void show_BL_Content(object sender, RoutedEventArgs e) - On button click, Shows the content of selected log file from listbox#4 into Textbox [Name="log"]
//            20.public void send_files_toRepo(string[] filenames) - for demo purpose [Sends comm message to Repo with body as name of files stored at local storage]
//            21.public void get_files_fromRepo() - for demo purpose [Receives comm message from Repo body as file names of files present in the Repository]
//            22.public void add_testElement(string[] testfiles) - for demo purpose [Adds test element into a build structure and passes it to create build request on user command ]
//            23.public void create_save_BR() - for demo purpose [Creates & Saves Build Request to Repository storage]
//            24.public void br_files() - for demo purpose [shows existing build request files into ListBox#3]
//            25.public void send_BR_toBuilder(string[] brfilenames) - for demo purpose [Sends comm message to Repo asking repo to send build request file/s to Mother builder]
//            26.public void start_builder(string process_count) - for demo purpose [sends comm message to Mother builder with body as number of procees to spawn]
//            27.public void show_BL_files() - for demo purpose [Shows all build/test log files generated by child builder/test harness that are present in the repository]
//--------------------------------------------------------------------------------------------------------------------------------------------------------//
/* Required Files:
* ---------------
* MainWindow.xaml, CodePopUp.xaml.cs, Comm.cs, IComm.cs, Serializer.cs
*
* Maintenance History:
* --------------------
* ver 1.0 : 19 Nov 2017 --- First release
* ver 1.1 : 5 Dec 2017 ---- Final release 
*/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Forms;
using Comm;


namespace GUI
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 
    using Serialization;
    using System.Threading;
    using System.IO;
    using System.Windows.Input;
    using System.Diagnostics;

    public partial class MainWindow : Window
    {
        /*------------------------< Browsing for files thourgh the browse window and adding selected folders' .cs files into first list box >--------------------------*/
        /*--------------------------------------------------------------< Variable Declaration >-----------------------------------------------------------------------*/
        IAsyncResult cbResult;
        Dictionary<string, List<string>> testelementfiles = new Dictionary<string, List<string>>();
        int testelement_count = 1;
        int i = 1;      //variable declared just to printing output in one manner

        Comm<MainWindow> comm { get; set; } = new Comm<MainWindow>();                                           //--
        string endPoint { get; } = Comm<MainWindow>.makeEndPoint("http://localhost", 8080, "GUI");                     //  | - Comm channel variable declaration 
        private Thread rcvThread = null;                                                                        //--

        Dictionary<string, Action<CommMessage>> messageDispatcher = new Dictionary<string, Action<CommMessage>>(); //Dictionary for message dispatcher 

        /*--------------------------------< Initializes the Components placed in the window, message dispatcher and comm componenets >---------------------------------*/
        public MainWindow()
        {
            try
            {
                InitializeComponent();
                initializeMessageDispatcher();
                showOnCommandPrompt();
                Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("\n Requirement 2\n"); Console.ResetColor();
                Console.WriteLine("Shall include a Message-Passing Communication Service built with WCF");
                comm.sndr.CreateSendChannel(endPoint);                                            //Created sender channel to send messages at port 8080
                Console.WriteLine("\nSender Channel Created for GUI at port: {0}", endPoint);
                comm.rcvr.CreateRecvChannel(endPoint);                                            //Created receiver channel to receive messages at port 8080
                Console.WriteLine("Receiver Channel Created for GUI at port: {0}", endPoint);
                Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("\n Requirement 11 [Part 1]\n"); Console.ResetColor();
                Console.WriteLine("The GUI client shall be a separate process, implemented with WPF and using message-passing communication.");
            }
            catch (Exception e) { Console.WriteLine(e); }            
        }

        /*-------------------------------------------------------< defines how to process each message command >-------------------------------------------------------*/
        void initializeMessageDispatcher()
        {
            // sends files stored at local storage to Repository
            try
            {
                messageDispatcher["SendFilestoRepo"] = (CommMessage msg) =>
                {
                    listBox2.Items.Clear();
                    string file_names = msg.body;
                    string[] files = file_names.Split(',');
                    foreach (var item in files)
                        listBox2.Items.Add(item);                   //addes the file names of files present in the repository received through comm message from Repository
                };
            }
            catch (Exception e) { Console.WriteLine(e); }
            
        }

        /*-----------------< when window is loaded the content written inside this methos gets displayed in the window automatically [for demo] >----------------------*/
        private void Window_Loaded(object sender, RoutedEventArgs e)
        {
            textbox1.Text = @"..\..\..\Local_storage\";
            System.Collections.ObjectModel.ObservableCollection<string> mylist = new System.Collections.ObjectModel.ObservableCollection<string> { "CodeToTest1.cs", "calculator.cs", "TestDriver1.cs", "Interfaces.cs", "CodeToTest2.cs", "TestDriver2.cs", "CodeToTest3.cs", "TestDriver1.cs" };
            listBox1.ItemsSource = mylist;                                                                      //adds file names in listbox#1
            
            string[] filenames = { "CodeToTest1.cs", "calculator.cs", "TestDriver1.cs", "Interfaces.cs", "CodeToTest2.cs", "TestDriver2.cs", "CodeToTest3.cs", "TestDriver1.cs" };
            send_files_toRepo(filenames);                                                                       //sends given file names to repository from local storage
            
            get_files_fromRepo();                                                                               //get currently present files from repository in listbox#2

            string[] testelement1 = { "CodeToTest1.cs", "calculator.cs", "TestDriver1.cs", "Interfaces.cs" };
            add_testElement(testelement1);                                                                      //adds test element
            create_save_BR();                                                                                   //creates new build request

            string[] testelement2 = { "CodeToTest1.cs", "calculator.cs", "TestDriver1.cs", "Interfaces.cs"};
            add_testElement(testelement2);                                                                      //adds test element
            string[] testelement3 = { "CodeToTest2.cs", "calculator.cs", "TestDriver2.cs", "Interfaces.cs"};
            add_testElement(testelement3);                                                                      //adds test element
            create_save_BR();                                                                                   //creates new build request

            string[] testelement4 = { "CodeToTest3.cs", "TestDriver3.cs"};
            add_testElement(testelement4);                                                                      //adds test element
            create_save_BR();                                                                                   //creates new build request

            br_files();                                                                                        //shows currently present buildrequest files in repository to listbox#3

            string[] brfilenames = { "buildRequest1.xml", "buildRequest2.xml", "buildRequest3.xml", "buildRequest4.xml" };
            send_BR_toBuilder(brfilenames);                                                                     //sends selected build request files to repository

            start_builder("3");                                                                                 //starts mother builder by sending spawning processes number

            show_BL_files();                                                                                    //shows the currently Repository present build/test log files
        }

        /*--------------------------------------------< Use of Command prompt to display GUI information and Project Requirment Demo Info >----------------------------*/
        public void showOnCommandPrompt()
        {
            Console.Title = "GUI Console";
            Console.WriteLine("-----------------------------------------------------------------------------------------------------------------------------------\n");
            Console.WriteLine("                                              Graphical User Interface Using WPF                                                   \n"); //<---------Requirement 6
            Console.WriteLine("-----------------------------------------------------------------------------------------------------------------------------------\n");
            Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 10\n"); Console.ResetColor();
            Console.WriteLine("1. Graphical User Interafce built using WPF [Status - Started]\n");
            Console.ForegroundColor = ConsoleColor.DarkBlue; Console.BackgroundColor = ConsoleColor.Gray; Console.WriteLine("GUI Info - \n"); Console.ResetColor();
            Console.WriteLine("* Browse Button                                 - Opens a window to choose the directory path and loads .cs files from that directory into the ListBox#1 \n");
            Console.WriteLine("* ListBox#1                                     - Shows the .cs file names selcted from local storage directory \n");
            Console.WriteLine("* Send Files to Repository Button               - Sends selected files from ListBox#1 to Repository storage directory \n");
            Console.WriteLine("* Get Files in Repository Button                - Gets files name of files present in the Repository storage directory  \n");
            Console.WriteLine("* ListBox#2                                     - Shows files name of files present in the Repository storage directory \n");
            Console.WriteLine("* Add test element                              - Adds the test element to the build request structure \n");
            Console.WriteLine("* Create-Save BuildRequest to Repository Button - Creates saves a build request of selected files from Listbox#2 and saves it to Repository storage directory \n");
            Console.WriteLine("* Get Existing BuildRequest Files Button        - Shows currently existing build request files in repository in the ListBox#3 \n");
            Console.WriteLine("* ListBox#3                                     - Shows the files name of generated/existing build request file \n");
            Console.WriteLine("* Send BuildRequests to Builder Button          - Gives the command to repository to send the selected build request files from ListBox#3 to Mother Builder \n");
            Console.WriteLine("* TextBox                                       - Gives the number of child builder processes to spawn \n");
            Console.WriteLine("* Start Mother Builder Button                   - sends the number got from TextBox to Mother Builder  \n");
            Console.WriteLine("* Show Files Button                             - Shows all build/test log files generated by child builder/test harness that are present in the repository \n");
            Console.WriteLine("* ListBox#4                                     - Shows all .txt file names present in the repository \n");
            Console.WriteLine("* Show Log File Content Button                  - Shows the content of selected log file from listbox#4 into Textbox \n");
            Console.WriteLine("* Textbox [Name = \"log\"]                      - Shows the content of selected log file from listbox#4 into Textbox \n");
            Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray;
            Console.WriteLine("In this demo, To see the functionality of 'ShutDown ProcessPool' Button, Please click on the Shutdown ProcessPool button in GUI."); Console.ResetColor();
        }
        
        /*---------------------------------------------------------------------< Invoke on UI thread >-----------------------------------------------------------------*/
        //shows the path selected from the browse window into the textbox
        void showPath(string path)
        {
            textbox1.Text = path;
        }

        /*----------------------------< adds the particular extension files available at the selected directory path into the first listbox >--------------------------*/
        void addFile(string file)
        {
            try
            {
                string filename = System.IO.Path.GetFileName(file);
                listBox1.Items.Insert(0, filename);
            }
            catch (Exception e)
            {
                Console.WriteLine("Please comment out the lines written in the 'Window_Loaded' method in order to get a fresh start");
                Console.WriteLine(e.Message);
            }

        }

        /*----------------------------------------------< recursive search for files matching pattern [extension - *.cs] >---------------------------------------------*/
        void search(string path, string pattern)
        {
            /* called on asynch delegate's thread */
            try
            {
                if (Dispatcher.CheckAccess())
                    showPath(path);
                else
                    Dispatcher.Invoke(
                      new Action<string>(showPath),
                      System.Windows.Threading.DispatcherPriority.Background,
                      new string[] { path }
                    );
                string[] files = System.IO.Directory.GetFiles(path, pattern);
                foreach (string file in files)
                {
                    if (Dispatcher.CheckAccess())
                        addFile(file);
                    else
                        Dispatcher.Invoke(
                          new Action<string>(addFile),
                          System.Windows.Threading.DispatcherPriority.Background,
                          new string[] { file }
                        );
                }
                string[] dirs = System.IO.Directory.GetDirectories(path);
                foreach (string dir in dirs)
                    search(dir, pattern);
            }
            catch (Exception e) { Console.WriteLine(e.Message); }

        }

        /*---------------------------------------------------------< Start search on asynchronous delegate's thread >--------------------------------------------------*/
        //On browse button click, Opens a browser window for selecting the directory [local storage]
        private void browse_Click(object sender, RoutedEventArgs e)
        {
            try
            {
                listBox1.Items.Clear();
                FolderBrowserDialog dlg = new FolderBrowserDialog();
                string path = AppDomain.CurrentDomain.BaseDirectory;
                dlg.SelectedPath = path;
                DialogResult result = dlg.ShowDialog();
                if (result == System.Windows.Forms.DialogResult.OK)
                {
                    path = dlg.SelectedPath;
                    string pattern = "*.cs";
                    Action<string, string> proc = this.search;
                    cbResult = proc.BeginInvoke(path, pattern, null, null);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Please comment out the lines written in the 'Window_Loaded' method in order to get a fresh start");
                Console.WriteLine(ex.Message);
            }

        }

        /*----------------------------< Sends a communication message to Repository with msg.body = name of files stored at local storage >----------------------------*/
        public void send_files_toRepo(object sender, RoutedEventArgs e)
        {
            try
            {
                CommMessage msg = new CommMessage(CommMessage.MessageType.FileRequest);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository"); //Repository receiving end point at port addr 8081
                msg.command = "SendFilestoRepo";
                var selected = listBox1.SelectedItems.Cast<String>().ToArray();   //selected file names from list box 1
                string files = string.Join(",", selected);
                msg.body = files;
                comm.sndr.PostMessage(msg);                                       //communication message posted to repo [inserted into Repository's receiving blocking queue]
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Send file names of user selected local storage files");
                Console.ResetColor();
                msg.show();
                status.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                status.Text = selected.Length.ToString() + " File transfer: Successful";
            }
            catch(Exception ex) { Console.WriteLine(ex.Message); }
        }
        
        /*-------------------< for demo purpose [Sends a communication message to Repository with msg.body = name of files stored at local storage] >------------------*/
        public void send_files_toRepo(string[] filenames)
        {
            try
            {
                CommMessage msg = new CommMessage(CommMessage.MessageType.FileRequest);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository"); //Repository receiving end point at port addr 8081
                msg.command = "SendFilestoRepo";
                //var selected = listBox1.SelectedItems.Cast<String>().ToArray();   //selected file names from list box 1
                string files = string.Join(",", filenames);
                msg.body = files;
                comm.sndr.PostMessage(msg);                                       //communication message posted to repo [inserted into Repository's receiving blocking queue]
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Send file names of user selected local storage files");
                Console.ResetColor();
                msg.show();
                status.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                status.Text = filenames.Length.ToString() + " File transfer: Successful";
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
        }

        
        /*-------------------------< Receives communication message from Repository with msg.body = file names of files present in the Repository >--------------------*/
        public void get_files_fromRepo(object sender, RoutedEventArgs e)
        {
            Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 11 [Part 2] \n"); Console.ResetColor();
            Console.WriteLine("It shall provide mechanisms to get file lists from the Repository \n");
            CommMessage send_msg = new CommMessage(CommMessage.MessageType.FileRequest);
            send_msg.from = endPoint;
            send_msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository"); //Repository receiving end point at port addr 8081
            send_msg.command = "RequestToGetFiles";
            send_msg.body = "Reuqest of Name of current files  present in Repo";
            comm.sndr.PostMessage(send_msg);                                       //communication message posted to repo [inserted into Repository's receiving blocking queue]
            Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Request of getting file names of currently present files in the Repository");
            Console.ResetColor();
            send_msg.show();                                            //asks repository to send file names of files present in it's storage directory

            rcvThread = comm.rcvr.start(rcvThreadProc);                            //starts receving thread
            void rcvThreadProc()
            {
                while (true)
                {
                    try
                    {
                        CommMessage msg = comm.rcvr.GetMessage();                                       //receives communication message from Repository [port addr - 8081]
                        Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine("\nMessage Received from Repository at GUI. Purpose - List of file names of currently present files in the Repository");
                        Console.ResetColor();
                        msg.show();
                        
                        if (msg.body == "quit")
                            break;
                        Dispatcher.Invoke(messageDispatcher[msg.command], new object[] { msg });        //process the message by using message dispatcher
                    }
                    catch (Exception ex) { Console.WriteLine(ex.Message); }
                }
            }
        }

        /*---------------< for demo purpose [Receives communication message from Repository with msg.body = file names of files present in the Repository] >-----------*/
        public void get_files_fromRepo()
        {
            Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 11 [Part 2] \n"); Console.ResetColor();
            Console.WriteLine("It shall provide mechanisms to get file lists from the Repository \n");
            CommMessage send_msg = new CommMessage(CommMessage.MessageType.FileRequest);
            send_msg.from = endPoint;
            send_msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository"); //Repository receiving end point at port addr 8081
            send_msg.command = "RequestToGetFiles";
            send_msg.body = "Reuqest of Name of current files  present in Repo";
            comm.sndr.PostMessage(send_msg);                                       //communication message posted to repo [inserted into Repository's receiving blocking queue]
            Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Request of getting file names of currently present files in the Repository");
            Console.ResetColor();
            send_msg.show();                                            //asks repository to send file names of files present in it's storage directory

            rcvThread = comm.rcvr.start(rcvThreadProc);                            //starts receving thread
            void rcvThreadProc()
            {
                while (true)
                {
                    try
                    {
                        CommMessage msg = comm.rcvr.GetMessage();                                       //receives communication message from Repository [port addr - 8081]
                        Console.ForegroundColor = ConsoleColor.Green; Console.WriteLine("\nMessage Received from Repository at GUI. Purpose - List of file names of currently present files in the Repository");
                        Console.ResetColor();
                        msg.show();

                        if (msg.body == "quit")
                            break;
                        Dispatcher.Invoke(messageDispatcher[msg.command], new object[] { msg });        //process the message by using message dispatcher
                    }
                    catch (Exception ex) { Console.WriteLine(ex.Message); }
                }
            }
        }

        
        /*------------------------------< Adds test element into a build structure and passes it to create build request on user command >-----------------------------*/
        public void add_testElement(object sender,RoutedEventArgs e)
        {
            try
            {
                List<string> lstitems = new List<string>();
                var selected = listBox2.SelectedItems.Cast<String>().ToArray();                             //gets selected files from list box 2                  
                foreach (var item in selected)
                {
                    lstitems.Add(item);
                }
                testelementfiles.Add(testelement_count.ToString(), lstitems);
                testelement.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                testelement.Text = testelement_count.ToString() + " Test Element Added!";
                testelement_count++;
            }
            catch (Exception ex) { Console.WriteLine(ex); }            
        }

        /*-------------------< for demo purpose [Adds test element into a build structure and passes it to create build request on user command] >---------------------*/
        public void add_testElement(string[] testfiles)
        {
            try
            {
                List<string> lstitems = new List<string>();
                //var selected = listBox2.SelectedItems.Cast<String>().ToArray();                             //gets selected files from list box 2                  
                for (int i = 0; i < testfiles.Length;i++)
                {
                    lstitems.Add(testfiles[i]);
                }
                testelementfiles.Add(testelement_count.ToString(), lstitems);
                testelement.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                testelement.Text = testelement_count.ToString() + " Test Element Added!";
                testelement_count++;
            }
            catch (Exception ex) { Console.WriteLine(ex); }
        }

        
        /*-------------------------------------------< Creates & Saves Build Request to Repository storage using Serialization >---------------------------------------*/
        public void create_save_BR(object sender, RoutedEventArgs e)
        {
            try
            {
                string filepath = @"../../../Repository/Repo_storage/";
                string[] xmlfile = Directory.GetFiles(filepath, "*.xml");
                int count = xmlfile.Length; 
                ListBoxItem xml_file = new ListBoxItem();
                string xml_filename = Serializer.start_serializer(testelementfiles, count);             //builds build request of selected files and save it to 
                xml_file.Content = xml_filename;
                listBox3.Items.Add(xml_file);                                                               //adds generated buildrequest file into list box 3
                testelementfiles.Clear();
                testelement_count = 1; 
                if(i == 1)
                {
                    Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 11 [Part 3] \n"); Console.ResetColor();
                    Console.WriteLine("select files for packaging into a test library, adding to a build request structure. It shall provide the capability of repeating that process to add other test libraries to the build request structure.\n");
                    Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 12 \n"); Console.ResetColor();
                    Console.WriteLine("The client shall send build request structures to the repository for storage and transmission to the Build Server. \n");
                    i = 2;
                }
                i = 2;
            }
            catch (Exception ex) { Console.WriteLine(ex); }            
        }

        /*-------------------------------< for demo purpose [Creates & Saves Build Request to Repository storage using Serialization] >--------------------------------*/
        public void create_save_BR()
        {
            try
            {
                string filepath = @"../../../Repository/Repo_storage/";
                string[] xmlfile = Directory.GetFiles(filepath, "*.xml");
                int count = xmlfile.Length; int i = 1;
                ListBoxItem xml_file = new ListBoxItem();
                string xml_filename = Serializer.start_serializer(testelementfiles, count);             //builds build request of selected files and save it to 
                xml_file.Content = xml_filename;
                listBox3.Items.Add(xml_file);                                                               //adds generated buildrequest file into list box 3
                testelementfiles.Clear();
                testelement_count = 1;
                while (i == 1)
                {
                    Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 11 [Part 3] \n"); Console.ResetColor();
                    Console.WriteLine("select files for packaging into a test library, adding to a build request structure. It shall provide the capability of repeating that process to add other test libraries to the build request structure.\n");
                    Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 12 \n"); Console.ResetColor();
                    Console.WriteLine("The client shall send build request structures to the repository for storage and transmission to the Build Server. \n");
                    i++;
                }

            }
            catch (Exception ex) { Console.WriteLine(ex); }

        }

        
        /*--------------------------------------< Shows currently existing build request files in repository in the ListBox#3 >----------------------------------------*/
        public void br_files(object sender, RoutedEventArgs e)
        {
            try
            {
                listBox3.Items.Clear();
                string filepath = @"../../../Repository/Repo_storage/";
                string[] xmlfile = Directory.GetFiles(filepath, "buildRequest*.xml");
                foreach (string file in xmlfile)
                {
                    string filename = Path.GetFileName(file);
                    listBox3.Items.Add(filename);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex); }
            
        }

        /*------------------------------< for demo purpose [Shows currently existing build request files in repository in the ListBox#3] >-----------------------------*/
        public void br_files()
        {
            try
            {
                listBox3.Items.Clear();
                string filepath = @"../../../Repository/Repo_storage/";
                string[] xmlfile = Directory.GetFiles(filepath, "buildRequest*.xml");
                foreach (string file in xmlfile)
                {
                    string filename = Path.GetFileName(file);
                    listBox3.Items.Add(filename);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex); }

        }

        
        /*-----------------------------------------< Shows content of selected file from ListBox#3 into CodePopUp window >---------------------------------------------*/
        private void localFiles_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            string fileName = listBox3.SelectedValue as string;
            try
            {
                string path = System.IO.Path.Combine(@"../../../Repository/Repo_storage/", fileName);
                string contents = File.ReadAllText(path);
                CodePopUp popup = new CodePopUp();                          //loads content of selected file into codepopup window
                popup.codeView.Text = contents;
                popup.Show();
            }
            catch (Exception ex) {  string msg = ex.Message; }
        }

        
        /*-----------------------< Sends communication message to Repository asking repository to send the build request file/s to Mother builder >--------------------*/
        public void send_BR_toBuilder(object sender, RoutedEventArgs e)
        {
            try
            {
                CommMessage msg = new CommMessage(CommMessage.MessageType.SendBuildRequest);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository");                   //Repository receiving end point at port address 8081
                msg.command = "AskRepotoSendFilestoBuilder";
                string files = "";
                foreach (var item in listBox3.SelectedItems)                        
                {
                    string str = item.ToString();                                                  //gets selected build request file names from list box 3 
                    if(str.Length > 18)
                    {
                        str = str.Remove(0, 37);
                    }
                    files += str + ",";
                }
                msg.body = files;                                                                  //send these build request file names to Repository
                comm.sndr.PostMessage(msg);
                brSent.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                brSent.Text = "Build Request/s Sent!";
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Request to repository to send selected build request/s in its storage to the Build Server");
                Console.ResetColor();
                msg.show();
                Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 13 \n"); Console.ResetColor();
                Console.WriteLine("The client shall be able to request the repository to send a build request in its storage to the Build Server for build processing. \n");
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
        }

        /*------------< for demo purpose [Sends communication message to Repository asking repository to send the build request file/s to Mother builder] >------------*/
        public void send_BR_toBuilder(string[] brfilenames)
        {
            try
            {
                CommMessage msg = new CommMessage(CommMessage.MessageType.SendBuildRequest);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8081, "Repository");                   //Repository receiving end point at port address 8081
                msg.command = "AskRepotoSendFilestoBuilder";
                string files = string.Join(",", brfilenames);
                msg.body = files;                                                                  //send these build request file names to Repository
                comm.sndr.PostMessage(msg);
                brSent.Foreground = new System.Windows.Media.SolidColorBrush(System.Windows.Media.Colors.Green);
                brSent.Text = "Build Request/s Sent!";
                Console.ForegroundColor = ConsoleColor.Black; Console.BackgroundColor = ConsoleColor.Gray; Console.Write("Requirement 13 \n"); Console.ResetColor();
                Console.WriteLine("The client shall be able to request the repository to send a build request in its storage to the Build Server for build processing. \n");
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to Repository. Purpose - Request to repository to send selected build request/s in its storage to the Build Server");
                Console.ResetColor();
                msg.show();
            }
            catch (Exception ex) { Console.WriteLine(ex.Message); }
        }

        
        /*----------------------------------< Sends communication message to Mother builder with msg.body = number of procees to spawn >-------------------------------*/
        public void start_builder(object sender, RoutedEventArgs e)
        {
            try
            {
                string str = pCount.ToString();                                                        //gets the process to spawn count from text box of GUI
                str = str.Remove(0, 33);
                string process_count = str;
                CommMessage msg = new CommMessage(CommMessage.MessageType.processCount);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8082, "MotherBuilder");                      //Mother Builder receiving end point at port address 8082
                msg.command = "processCountfromGUI";
                msg.body = process_count;
                comm.sndr.PostMessage(msg);
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to MotherBuilder. Purpose - Number of Child Builder/s to spawn & Start Mother Builder");
                Console.ResetColor();
                msg.show();
            }
            catch (Exception ex) { Console.WriteLine(ex); }
            
        }

        /*-----------------------< for demo purpose [Sends communication message to Mother builder with msg.body = number of procees to spawn] >-----------------------*/
        public void start_builder(string process_count)
        {
            try
            {
                pCount.Text = process_count;
                CommMessage msg = new CommMessage(CommMessage.MessageType.processCount);
                msg.from = endPoint;
                msg.to = Comm<MainWindow>.makeEndPoint("http://localhost", 8082, "MotherBuilder");                      //Mother Builder receiving end point at port address 8082
                msg.command = "processCountfromGUI";
                msg.body = process_count;
                comm.sndr.PostMessage(msg);
                Console.ForegroundColor = ConsoleColor.Yellow; Console.WriteLine("\nMessage Sent from GUI to MotherBuilder. Purpose - Number of Child Builder/s to spawn & Start Mother Builder");
                Console.ResetColor();
                msg.show();
            }
            catch (Exception ex) { Console.WriteLine(ex); }

        }

        
        /*-------------------------< Shows all build/test log files generated by child builder/test harness that are present in the repository >-----------------------*/
        public void show_BL_files(object sender, RoutedEventArgs e)
        {
            try
            {
                string filepath = @"../../../Repository/Repo_storage/";
                string[] logfile = Directory.GetFiles(filepath, "*.txt");
                foreach (string file in logfile)
                {
                    string filename = Path.GetFileName(file);
                    listBox4.Items.Add(filename);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex); }
            
        }

        /*-------------------< for demo purpose [Shows all build/test log files generated by child builder/test harness that are present in the repository] >----------*/
        public void show_BL_files()
        {
            try
            {
                string filepath = @"../../../Repository/Repo_storage/";
                string[] logfile = Directory.GetFiles(filepath, "*.txt");
                foreach (string file in logfile)
                {
                    string filename = Path.GetFileName(file);
                    listBox4.Items.Add(filename);
                }
            }
            catch (Exception ex) { Console.WriteLine(ex); }
        }

        
        /*---------------------------------------------< Shows the content of selected log file from listbox#4 into Textbox >------------------------------------------*/
        public void show_BL_Content(object sender, RoutedEventArgs e)
        {
            try
            {
                string filename = listBox4.SelectedValue.ToString();
                string full_path = @"../../../Repository/Repo_storage/" + filename;
                string contents = File.ReadAllText(full_path);
                File_Name.Text = filename;
                log.Text = contents;
            }
            catch (Exception ex) { Console.WriteLine(ex); }
        }
        

        /*----------------------------------------------------< asking mother builder to quit the process pool >-------------------------------------------------------*/
        private void end_process_pool(object sender, RoutedEventArgs e)
        {
            try
            {
                Process[] processes = Process.GetProcessesByName("MotherBuilder");
                foreach (Process p in processes)
                {
                    p.Kill();
                }
                Process[] process = Process.GetProcessesByName("ChildBuilder");
                foreach (Process p in process)
                {
                    p.Kill();
                }
            }
            catch (Exception ex) { Console.WriteLine(ex); }            

        }
    }
}
